{"version":3,"sources":["main/CanvasContext.js","main/ClearCanvasButton.js","main/SaveImageButton.js","main/Loading.js","main/Canvas.js","index.js"],"names":["CanvasContext","React","createContext","useCanvas","useContext","ClearCanvasButton","clearCanvas","style","zIndex","marginLeft","position","onClick","SaveImageButton","addBackgroundImage","setSavingState","handleSave","a","id","download","Date","getTime","hidden","Loading","lazy","Canvas","imageSrc","canvasRef","startDrawing","finishDrawing","draw","imageLoaded","setImageLoaded","savingState","prepareImage","useEffect","src","alt","onMouseDown","onMouseUp","onMouseMove","ref"],"mappings":"wMAEMA,E,OAAgBC,EAAMC,gBAmJfC,EAAY,kBAAMC,qBAAWJ,K,+DCjI3BK,UAjBW,WAAO,IACvBC,EAAgBH,cAAhBG,YAER,OACE,wBACEC,MAAO,CACLC,OAAQ,GACRC,WAAY,MACZC,SAAU,YAEZC,QAASL,EANX,4B,oFCwBWM,UA5BS,WAAO,IAAD,EACmBT,cAAvCU,EADoB,EACpBA,mBAAoBC,EADA,EACAA,eAEtBC,EAAU,uCAAG,sBAAAC,EAAA,6DACjBF,GAAe,GADE,SAEXD,IAFW,2CAAH,qDAKhB,OACE,qCACE,wBACEN,MAAO,CACLC,OAAQ,GACRE,SAAU,YAEZC,QAASI,EALX,wBASA,mBACEE,GAAG,iBACHC,SAAU,QAAS,IAAIC,MAAOC,UAC9BC,QAAM,S,4FCrBCC,EAFC,kBAAM,8C,cCGhBjB,G,MAAoBJ,IAAMsB,MAAK,kBAAM,2CACrCX,EAAkBX,IAAMsB,MAAK,kBAAM,0CCA1B,WACbpB,cACAmB,UACAjB,4BACAO,0BACAY,ODHa,YAA+B,IAAbC,EAAY,EAAZA,SAAY,EAUvCtB,cARFuB,EAFyC,EAEzCA,UACAC,EAHyC,EAGzCA,aACAC,EAJyC,EAIzCA,cACAC,EALyC,EAKzCA,KACAC,EANyC,EAMzCA,YACAC,EAPyC,EAOzCA,eACAC,EARyC,EAQzCA,YACAC,EATyC,EASzCA,aAUF,OAPAC,qBAAU,WAIR,OAHKJ,GAAeL,GAClBQ,EAAaR,GAER,kBAAMM,GAAe,MAC3B,IAGD,qCACGC,GAAe,2CACfF,EACC,sBAAKb,GAAG,mBAAR,UACE,qBAAKA,GAAG,SAASkB,IAAKV,EAAUW,IAAI,KACpC,wBACEnB,GAAG,SACHoB,YAAaV,EACbW,UAAWV,EACXW,YAAaV,EACbW,IAAKd,IAEP,cAAC,EAAD,IACA,cAAC,EAAD,OAGF,cAAC,EAAD,W","file":"static/js/main.8a8d9791.chunk.js","sourcesContent":["import React, { useContext, useRef, useState } from \"react\";\n\nconst CanvasContext = React.createContext();\n\nexport const CanvasProvider = ({ children }) => {\n  const [isDrawing, setIsDrawing] = useState(false);\n  const canvasRef = useRef(null);\n  const contextRef = useRef(null);\n  const backgroundRef = useRef(new Image());\n\n  const [imageLoaded, setImageLoaded] = useState(false);\n  const [savingState, setSavingState] = useState(false);\n\n  const prepareCanvas = () => {\n    const canvas = canvasRef && canvasRef.current;\n\n    if (canvas) {\n      canvas.width = window.innerWidth * 2;\n      canvas.height = window.innerHeight * 2;\n      canvas.style.width = `${window.innerWidth}px`;\n      canvas.style.height = `${window.innerHeight}px`;\n    }\n\n    const context = canvas && canvas.getContext(\"2d\");\n    if (context) {\n      context.scale(2, 2);\n      context.lineCap = \"round\";\n      context.strokeStyle = \"black\";\n      context.lineWidth = 5;\n      contextRef.current = context;\n    }\n  };\n\n  const addBackgroundImage = async () => {\n    const canvas = canvasRef && canvasRef.current;\n    const context = canvas && canvas.getContext(\"2d\");\n    const background = backgroundRef && backgroundRef.current;\n\n    // Make sure the image is loaded first otherwise nothing will draw.\n    // background.onload = async function () {\n    //when background is a url\n    // const canvasElement = document.getElementById(\"canvas\");\n    // if (canvasElement && background.current.src) {\n    //   canvasElement.style.background = `url('${background.current.src}')`;\n    //   canvasElement.style.background && setImageLoaded(true);\n    // }\n    //when background is an Image\n    context.globalCompositeOperation = \"destination-over\";\n    background && (await context.drawImage(background, 0, 0));\n    setImageLoaded(true);\n    await saveCanvasAsImage();\n    // };\n    background.onerror = function () {\n      alert(new Error(\"Could not load image at \" + background.src));\n    };\n  };\n\n  const startDrawing = ({ nativeEvent }) => {\n    const context = contextRef?.current;\n    const { offsetX, offsetY } = nativeEvent;\n\n    context?.beginPath();\n    context?.moveTo(offsetX, offsetY);\n    setIsDrawing(true);\n  };\n\n  const finishDrawing = () => {\n    const context = contextRef?.current;\n\n    context?.closePath();\n    setIsDrawing(false);\n  };\n\n  const draw = ({ nativeEvent }) => {\n    const context = contextRef?.current;\n    if (!isDrawing) {\n      return;\n    }\n    const { offsetX, offsetY } = nativeEvent;\n    context?.lineTo(offsetX, offsetY);\n    context?.stroke();\n  };\n\n  const clearCanvas = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext(\"2d\");\n\n    context.clearRect(0, 0, canvas.width, canvas.height);\n  };\n\n  const saveCanvasAsImage = async () => {\n    const canvas = canvasRef && canvasRef.current;\n\n    if (imageLoaded && canvas) {\n      const image = await canvas.toDataURL(\"image/png\");\n      // .replace(\"image/png\", \"image/octet-stream\");\n\n      const anchorElement = document.getElementById(\"download-image\");\n      if (anchorElement) {\n        anchorElement.href = image;\n        setSavingState(false);\n\n        anchorElement.click();\n      }\n    }\n  };\n\n  const prepareImage = async (imageSrc) => {\n    if (backgroundRef && backgroundRef.current) {\n      backgroundRef.current.src = imageSrc;\n      backgroundRef.current.onload = async () => {\n        setImageLoaded(true);\n        await backgroundRef.current.setAttribute(\"crossOrigin\", \"anonymous\");\n        await prepareCanvas();\n      };\n\n      backgroundRef.current.onerror = function () {\n        alert(\n          new Error(\"Could not load image at \" + backgroundRef.current.src)\n        );\n      };\n    }\n  };\n\n  return (\n    <CanvasContext.Provider\n      value={{\n        canvasRef,\n        contextRef,\n        backgroundRef,\n        prepareCanvas,\n        startDrawing,\n        finishDrawing,\n        clearCanvas,\n        draw,\n        saveCanvasAsImage,\n        addBackgroundImage,\n        imageLoaded,\n        setImageLoaded,\n        savingState,\n        setSavingState,\n        prepareImage,\n      }}\n    >\n      {children}\n    </CanvasContext.Provider>\n  );\n};\n\nexport const useCanvas = () => useContext(CanvasContext);\n","import React from \"react\";\nimport { useCanvas } from \"./CanvasContext\";\n\nconst ClearCanvasButton = () => {\n  const { clearCanvas } = useCanvas();\n\n  return (\n    <button\n      style={{\n        zIndex: 22,\n        marginLeft: \"70%\",\n        position: \"relative\",\n      }}\n      onClick={clearCanvas}\n    >\n      Clear Canvas\n    </button>\n  );\n};\n\nexport default ClearCanvasButton;\n","import React from \"react\";\nimport { useCanvas } from \"./CanvasContext\";\n\nconst SaveImageButton = () => {\n  const { addBackgroundImage, setSavingState } = useCanvas();\n\n  const handleSave = async () => {\n    setSavingState(true);\n    await addBackgroundImage();\n  };\n\n  return (\n    <>\n      <button\n        style={{\n          zIndex: 22,\n          position: \"relative\",\n        }}\n        onClick={handleSave}\n      >\n        Save Image\n      </button>\n      <a\n        id=\"download-image\"\n        download={\"snap\" + new Date().getTime()}\n        hidden\n      ></a>\n    </>\n  );\n};\n\nexport default SaveImageButton;\n","import React from \"react\";\n\nconst Loading = () => <div>Loading...</div>;\n\nexport default Loading;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { useCanvas } from \"./CanvasContext\";\nimport \"./Canvas.css\";\nimport Loading from \"./Loading\";\n\nconst ClearCanvasButton = React.lazy(() => import(\"./ClearCanvasButton\"));\nconst SaveImageButton = React.lazy(() => import(\"./SaveImageButton\"));\n\nexport default function Canvas({ imageSrc }) {\n  const {\n    canvasRef,\n    startDrawing,\n    finishDrawing,\n    draw,\n    imageLoaded,\n    setImageLoaded,\n    savingState,\n    prepareImage,\n  } = useCanvas();\n\n  useEffect(() => {\n    if (!imageLoaded && imageSrc) {\n      prepareImage(imageSrc);\n    }\n    return () => setImageLoaded(false);\n  }, []);\n\n  return (\n    <>\n      {savingState && <div>Saving..</div>}\n      {imageLoaded ? (\n        <div id=\"canvas-container\">\n          <img id=\"bg-img\" src={imageSrc} alt=\"\" />\n          <canvas\n            id=\"canvas\"\n            onMouseDown={startDrawing}\n            onMouseUp={finishDrawing}\n            onMouseMove={draw}\n            ref={canvasRef}\n          />\n          <ClearCanvasButton />\n          <SaveImageButton/>\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </>\n  );\n}\n","import { useCanvas } from \"./main/CanvasContext\";\nimport Loading from \"./main/Loading\";\nimport ClearCanvasButton from \"./main/ClearCanvasButton\";\nimport SaveImageButton from \"./main/SaveImageButton\";\nimport Canvas from \"./main/Canvas\";\n\nexport default {\n  useCanvas,\n  Loading,\n  ClearCanvasButton,\n  SaveImageButton,\n  Canvas,\n};\n"],"sourceRoot":""}